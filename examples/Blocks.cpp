/*
 * Blocks.cpp
 * RVO2 Library
 *
 * Copyright 2008 University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please send all bug reports to <geom@cs.unc.edu>.
 *
 * The authors may be contacted via:
 *
 * Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
 * Dept. of Computer Science
 * 201 S. Columbia St.
 * Frederick P. Brooks, Jr. Computer Science Bldg.
 * Chapel Hill, N.C. 27599-3175
 * United States of America
 *
 * <http://gamma.cs.unc.edu/RVO2/>
 */

/*
 * Example file showing a demo with 100 agents split in four groups initially
 * positioned in four corners of the environment. Each agent attempts to move to
 * other side of the environment through a narrow passage generated by four
 * obstacles. There is no roadmap to guide the agents around the obstacles.
 */

#ifndef RVO_OUTPUT_TIME_AND_POSITIONS
#define RVO_OUTPUT_TIME_AND_POSITIONS 1
#endif

#ifndef RVO_SEED_RANDOM_NUMBER_GENERATOR
#define RVO_SEED_RANDOM_NUMBER_GENERATOR 1
#endif

#include <cmath>
#include <cstdlib>

#include <vector>

#if RVO_OUTPUT_TIME_AND_POSITIONS
#include <iostream>
#endif

#if RVO_SEED_RANDOM_NUMBER_GENERATOR
#include <ctime>
#endif

#if _OPENMP
#include <omp.h>
#endif

#include <RVO.h>

#ifndef M_PI
const float M_PI = 3.14159265358979323846f;
#endif
#include <fstream>
#include <sstream>

int curGoalId[12] = {1,1,1,1,1,1,1,1,1,1,1,1};
std::vector<std::vector<RVO::Vector2>> goalsList;
std::vector<RVO::Vector2> goals;
std::vector<std::vector<RVO::Vector2>> trajs;

void initGoalsList() {
	std::string filename = "/home/malintha/Desktop/scp/rvo2-2.0.2/RVO2/examples/goals/goalsList.txt";
	std::ifstream infile(filename);
	int x, y, z;
	std::vector<RVO::Vector2> goals_t;

	while(infile >> x >> y >> z) {
		if (x == 0 && y == 0 && z == 0) {
			goalsList.push_back(goals_t);
			goals_t.clear();
		} else {
			RVO::Vector2 v(x,y);
			goals_t.push_back(v);
		}
	}
}

void setupScenario(RVO::RVOSimulator *sim)
{
#if RVO_SEED_RANDOM_NUMBER_GENERATOR
	std::srand(static_cast<unsigned int>(std::time(NULL)));
#endif

	sim->setTimeStep(0.01f);
	sim->setAgentDefaults(4.0f, 5, 5.0f, 5.0f, 0.3f, 3.0f);

	// goals list
	initGoalsList();
	std::cout<<"## goalsVec: "<<goalsList.size()<<" "<<goalsList[0].size()<<std::endl;
	

	/*
	 * Add robots
	 */
	sim->addAgent(RVO::Vector2(4,8));
	goals.push_back(goalsList[0][1]);

	sim->addAgent(RVO::Vector2(5,8));
	goals.push_back(goalsList[1][1]);

	sim->addAgent(RVO::Vector2(6,8));
	goals.push_back(goalsList[2][1]);

	sim->addAgent(RVO::Vector2(4,7));
	goals.push_back(goalsList[3][1]);

	sim->addAgent(RVO::Vector2(5,7));
	goals.push_back(goalsList[4][1]);

	sim->addAgent(RVO::Vector2(6,7));
	goals.push_back(goalsList[5][1]);

	// sim->addAgent(RVO::Vector2(4,6));
	// goals.push_back(goalsList[6][1]);

	// sim->addAgent(RVO::Vector2(5,6));
	// goals.push_back(goalsList[7][1]);

	// sim->addAgent(RVO::Vector2(6,6));
	// goals.push_back(goalsList[8][1]);

	// sim->addAgent(RVO::Vector2(4,5));
	// goals.push_back(goalsList[9][1]);

	// sim->addAgent(RVO::Vector2(5,5));
	// goals.push_back(goalsList[10][1]);

	// sim->addAgent(RVO::Vector2(6,5));
	// goals.push_back(goalsList[11][1]);

	// init empty trajs
	for(int i=0;i<6;i++) {
		std::vector<RVO::Vector2> traj;
		trajs.push_back(traj);
	}


	/*
	 * Add (polygonal) obstacles, specifying their vertices in counterclockwise
	 * order.
	 */
	std::vector<RVO::Vector2> obstacle1, obstacle2, obstacle3, obstacle4;

	// obstacle1.push_back(RVO::Vector2(-10.0f, 40.0f));
	// obstacle1.push_back(RVO::Vector2(-40.0f, 40.0f));
	// obstacle1.push_back(RVO::Vector2(-40.0f, 10.0f));
	// obstacle1.push_back(RVO::Vector2(-10.0f, 10.0f));

	// obstacle2.push_back(RVO::Vector2(10.0f, 40.0f));
	// obstacle2.push_back(RVO::Vector2(10.0f, 10.0f));
	// obstacle2.push_back(RVO::Vector2(40.0f, 10.0f));
	// obstacle2.push_back(RVO::Vector2(40.0f, 40.0f));

	// obstacle3.push_back(RVO::Vector2(10.0f, -40.0f));
	// obstacle3.push_back(RVO::Vector2(40.0f, -40.0f));
	// obstacle3.push_back(RVO::Vector2(40.0f, -10.0f));
	// obstacle3.push_back(RVO::Vector2(10.0f, -10.0f));

	// obstacle4.push_back(RVO::Vector2(-10.0f, -40.0f));
	// obstacle4.push_back(RVO::Vector2(-10.0f, -10.0f));
	// obstacle4.push_back(RVO::Vector2(-40.0f, -10.0f));
	// obstacle4.push_back(RVO::Vector2(-40.0f, -40.0f));

	// sim->addObstacle(obstacle1);
	// sim->addObstacle(obstacle2);
	// sim->addObstacle(obstacle3);
	// sim->addObstacle(obstacle4);

	/* Process the obstacles so that they are accounted for in the simulation. */
	// sim->processObstacles();
}

#if RVO_OUTPUT_TIME_AND_POSITIONS
void updateVisualization(RVO::RVOSimulator *sim)
{
	/* Output the current global time. */
	std::cout << sim->getGlobalTime();

	/* Output the current position of all the agents. */
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		std::cout << " " << sim->getAgentPosition(i);
		trajs[i].push_back(sim->getAgentPosition(i));
	}

	std::cout << std::endl;
}
#endif

void setPreferredVelocities(RVO::RVOSimulator *sim)
{
	/*
	 * Set the preferred velocity to be a vector of unit magnitude (speed) in the
	 * direction of the goal.
	 */
#ifdef _OPENMP
#pragma omp parallel for
#endif
	for (int i = 0; i < static_cast<int>(sim->getNumAgents()); ++i) {
		RVO::Vector2 goalVector = goals[i] - sim->getAgentPosition(i);
		
		if (std::sqrt(RVO::absSq(goalVector)) > 0.5f) {
			goalVector = RVO::normalize(goalVector);
		}

		sim->setAgentPrefVelocity(i, goalVector);

		/*
		 * Perturb a little to avoid deadlocks due to perfect symmetry.
		 */
		float angle = std::rand() * 2.0f * M_PI / RAND_MAX;
		float dist = std::rand() * 0.0001f / RAND_MAX;

		sim->setAgentPrefVelocity(i, sim->getAgentPrefVelocity(i) +
		                          dist * RVO::Vector2(std::cos(angle), std::sin(angle)));
	}
}

/* Check if all agents have reached their goals. */
bool reachedGoal(RVO::RVOSimulator *sim)
{
	bool reached = true;
	int nGoals = 5; 
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		if (std::sqrt(RVO::absSq(sim->getAgentPosition(i) - goals[i]) > 0.05)) {
			reached = reached * false;
		}
		else {
			int curGoal = curGoalId[i];
			if(curGoalId[i] < nGoals-1) {
				goals[i] = goalsList[i][++curGoal];
				curGoalId[i] = curGoal;
				// std::cout<<"## curr: "<<sim->getAgentPosition(i)<<" "<<goals[i]<<i<<std::endl;
			}
			else if(curGoal == nGoals - 1) {
				// std::cout<<"reached goal"<<std::endl;
				reached = reached * true;
			}
		}
	}
return reached;
}

void storeTrajs() {
	for(int i=0; i<trajs.size();i++) {
		std::cout << "Writing trajs "<<i << std::endl;
		std::stringstream ss;
		ss << "/home/malintha/Desktop/scp/rvo2-2.0.2/RVO2/examples/trajectories/pos_" << i << ".txt";
		std::ofstream ofs(ss.str(), std::ofstream::trunc);
		for(int j=0;j<trajs[i].size();j++) {
	   		ofs << trajs[i][j].x() << " " <<trajs[i][j].y() << " " << "4"<<std::endl;
		}
		ofs.close();
	}
}

int main()
{

	/* Create a new simulator instance. */
	RVO::RVOSimulator *sim = new RVO::RVOSimulator();

// 	/* Set up the scenario. */
	setupScenario(sim);

	/* Perform (and manipulate) the simulation. */
	do {
#if RVO_OUTPUT_TIME_AND_POSITIONS
		updateVisualization(sim);
#endif
		setPreferredVelocities(sim);
		sim->doStep();
	}
	while (!reachedGoal(sim));

	storeTrajs();

	delete sim;

	return 0;
}
